#version 330 core

// Interpolated values from the vertex shaders
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_A_cameraspace;
in vec3 LightDirection_B_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform vec3 LightPosition_A_worldspace;
uniform vec3 LightPosition_B_worldspace;

uniform float lightPower_A;
uniform float lightPower_B;
uniform float ambientPower;

uniform vec3 diffuseColor;
uniform float specularity;
uniform float hardness;
uniform float alpha;

void main(){

	// Light emission properties
	vec3 LightColor = vec3(1,1,1);
	
	// Material properties
	vec3 ambientColor = vec3(0.9, 0.95, 1.0) * diffuseColor * ambientPower;
	vec3 specularColor = vec3(1,1,1);

	// Distance to the light
	float distance_A = length( LightPosition_A_worldspace - Position_worldspace );
	float distance_B = length( LightPosition_B_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	
	// Direction of the light (from the fragment to the light)
	vec3 l_A = normalize( LightDirection_A_cameraspace );
	vec3 l_B = normalize( LightDirection_B_cameraspace );	

	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta_A = clamp( dot( n, l_A ), 0, 1);	
	float cosTheta_B = clamp( dot( n, l_B ), 0, 1);

//	float cosTheta_A = dot( n, l_A );
//	float cosTheta_B = dot( n, l_B );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);

	// Direction in which the triangle reflects the light
	vec3 R_A = reflect(-l_A,n);
	vec3 R_B = reflect(-l_B,n);	

	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha_A = clamp( dot( E,R_A ), 0, 1);
	float cosAlpha_B = clamp( dot( E,R_B ), 0, 1);

	float diffuseComponent_A = cosTheta_A / (distance_A * distance_A);
	float diffuseComponent_B = cosTheta_B / (distance_B * distance_B);

	float specularComponent_A = specularity * pow(cosAlpha_A, hardness) / (distance_A * distance_A);
	float specularComponent_B = specularity * pow(cosAlpha_B, hardness) / (distance_B * distance_B);

	vec3 RGBcolor_A = ambientColor + LightColor * lightPower_A * (diffuseComponent_A * diffuseColor + specularComponent_A * specularColor);
	vec3 RGBcolor_B = ambientColor + LightColor * lightPower_B * (diffuseComponent_B * diffuseColor + specularComponent_B * specularColor);

	vec3 RGBcolor = RGBcolor_A + RGBcolor_B;

	float a_A = specularComponent_A * lightPower_A * (1-alpha);
	float a_B = specularComponent_B * lightPower_B * (1-alpha);

	color.r = RGBcolor.r;
	color.g = RGBcolor.g;
	color.b = RGBcolor.b;
	color.a = a_A + a_B + alpha;
}